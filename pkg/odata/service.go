package odata

import (
	"context"
	"time"

	"github.com/kardianos/service"
)

// =================================================================================================
// IMPLEMENTA√á√ÉO DE SERVI√áO (Windows Service, systemd, launchd)
// =================================================================================================

// ServiceWrapper implementa a interface service.Interface para o servidor GoData
type ServiceWrapper struct {
	server *Server
}

// Start √© chamado pelo gerenciador de servi√ßos para iniciar o servi√ßo
// Implementa a interface service.Interface
func (sw *ServiceWrapper) Start(svc service.Service) error {
	if sw.server.serviceLogger != nil {
		sw.server.serviceLogger.Info("üöÄ Iniciando servi√ßo GoData...")
	}

	// Cria contexto para controle do servi√ßo
	sw.server.serviceCtx, sw.server.serviceCancel = context.WithCancel(context.Background())

	// Inicia o servi√ßo em goroutine separada
	go sw.runAsService()

	return nil
}

func (sw *ServiceWrapper) runAsService() {
	defer func() {
		if panicValue := recover(); panicValue != nil {
			if sw.server.serviceLogger != nil {
				sw.server.serviceLogger.Errorf("Erro cr√≠tico no servi√ßo: %v", panicValue)
			}
		}
	}()

	if sw.server.serviceLogger != nil {
		sw.server.serviceLogger.Info("üìä Servidor GoData configurado e iniciado como servi√ßo")
	}

	// Inicia o servidor com contexto de servi√ßo
	if err := sw.server.startWithContext(sw.server.serviceCtx); err != nil {
		if sw.server.serviceLogger != nil {
			sw.server.serviceLogger.Errorf("Erro ao iniciar servidor: %v", err)
		}
	}
}

// Stop √© chamado pelo gerenciador de servi√ßos para parar o servi√ßo
// Implementa a interface service.Interface
func (sw *ServiceWrapper) Stop(svc service.Service) error {
	if sw.server.serviceLogger != nil {
		sw.server.serviceLogger.Info("‚èπÔ∏è Parando servi√ßo GoData...")
	}

	// Cancela o contexto para sinalizar shutdown
	if sw.server.serviceCancel != nil {
		sw.server.serviceCancel()
	}

	// Aguarda um tempo para shutdown graceful
	time.Sleep(2 * time.Second)

	// Para o servidor se estiver rodando
	if err := sw.server.Shutdown(); err != nil {
		if sw.server.serviceLogger != nil {
			sw.server.serviceLogger.Errorf("Erro ao parar servidor: %v", err)
		}
		return err
	}

	if sw.server.serviceLogger != nil {
		sw.server.serviceLogger.Info("‚úÖ Servi√ßo GoData parado com sucesso")
	}

	return nil
}
